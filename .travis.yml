language: python

sudo: required
dist: trusty

services:
  - docker

cache:
  directories:
    - $HOME/.cache/pip

matrix:
  include:
    - python: 3.4
    - python: 3.5

before_install:
  - export DOCKER0_IP=$(/sbin/ifconfig docker0 |grep 'inet addr' | sed -e 's/.*addr:\([^ ]*\).*/\1/')
  - export EPICS_CA_ADDR_LIST=$( echo $DOCKER0_IP | sed -e 's/^\([0-9]\+\)\.\([0-9]\+\)\..*$/\1.\2.255.255/' )
  - export EPICS_CA_AUTO_ADDR_LIST="no"
  - export EPICS_CA_MAX_ARRAY_BYTES=10000000
  - export DOCKERIMAGE="klauer/simioc-docker"
  - export DOCKERTAG="pyepics-docker"
  - export CONDA_ENV="testenv"

  - perl --version
  - git fetch --unshallow
  - docker pull ${DOCKERIMAGE}:${DOCKERTAG}
  - docker images
  - docker ps -a
  - docker run -d -p $DOCKER0_IP:5064:5064/tcp -p $DOCKER0_IP:5065:5065/udp --name epics_iocs ${DOCKERIMAGE}:${DOCKERTAG}
  - docker ps -a

  # INSTALL CONDA
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
  - chmod +x miniconda.sh
  - "./miniconda.sh -b -p $HOME/mc"
  - env

  - export PATH=$HOME/mc/bin:$PATH
  - conda config --set always_yes true
  - conda update conda --yes
  - conda install conda-build anaconda-client jinja2
  - conda config --add channels lightsource2
  - conda config --add channels soft-matter

  # MAKE THE CONDA RECIPE
  - conda create -n $CONDA_ENV python=$TRAVIS_PYTHON_VERSION epics-base
  - source activate $CONDA_ENV

  # need to reactivate after installing epics-base so that the EPICS_BASE env
  # var is set
  - source activate $CONDA_ENV

install:
  # install pyepics dependencies
  - conda install numpy
  - pip install pytest pytest-cov codecov
  # install pypvasync as a source install
  - python setup.py develop

  # setup some path environment variables for epics
  - export PATH=$PATH:$EPICS_BASE/bin/$EPICS_HOST_ARCH
  - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$EPICS_BASE/lib/$EPICS_HOST_ARCH"
  - echo "PATH=$PATH"

script:
  # check/record some basic pyepics things
  - echo "Checking pypvasync version and libca locations:"
  - python -c "import pvasync; print(pvasync.__version__)"
  - python -c "import pvasync.find_libca; print(pvasync.find_libca.find_libca())"

  - echo "Checking if the motor/areadetector IOC is running:"
  - python -c "import pvasync; pvasync.blocking_mode(); print('mtr1', pvasync.caget('sim:mtr1.RBV'))"
  - python -c "import pvasync; pvasync.blocking_mode(); print('arraycounter', pvasync.caget('sim:det:ROI1:ArrayCounter'))"
  - echo "Checking if the pypvasync test suite ioc is running:"
  - python -c "import pvasync; pvasync.blocking_mode(); print('long1', pvasync.caget('Py:long1'))"

  - caget sim:mtr1.RBV
  - caget sim:det:ROI1:ArrayCounter
  - caget Py:long1

  - py.test -vv --cov=pvasync --cov-report term-missing tests

after_success:
    - env
    - codecov
